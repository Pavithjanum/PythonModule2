# -*- coding: utf-8 -*-

"""

Created on Fri May 17 16:36:10 2019

 

@author: 376020

"""

#

#Business challenge/requirement 

#LifeTel Telecom is the latest entrant in the highly competitive Telecom market of Singapore. It issues SIM to the verified users. 

#Till now verification was manual through the photocopy of approved id card document. However government has recently introduced 

#Social ID called Reference ID which is mapped to fingerprint of user. LifeTel should now verify user against the fingerprint and Reference ID 

#Key issues 

#Build a system where when user enters Reference ID it is encrypted, so that hackers cannot view the mapping of Reference ID and finger print 

#Considerations 

#System should be secure 

#Data volume 

#- NA 

#Additional information 

#- NA 

#Business benefits 

#Company will be able to quickly issue SIM to user and expected gain in volume is approximately 10 times as the 

#manual process of verification is replaced with secure automated system 

#Approach to Solve 

#You have to use fundamentals of Python taught in module 2 

#1. Read the input from command line – Reference ID 

#2. Check for validity – it should be 12 digits and allows on number and alphabet 

#

#3. Encrypt the Reference ID and print it for reference 

 

import re

 

reference_id = input('Enter your Reference ID: ')

    

regex = r'\d'

 

digit_validation = len(re.findall(regex, reference_id))

 

if reference_id.isalnum() and digit_validation == 12 :

    print('Valid Reference ID, Thanks!')

    encrypted_ref_id = reference_id.encode('utf-8',errors='strict')

    print('Encrypted Reference ID for your reference is: ',encrypted_ref_id)

else:

    print('Not a Valid Reference ID!!')

 

#Enhancements for code 

#You can try these enhancements in code 

#1. Allow some special characters in ReferenceID 

#2. Give the option for decryption to user 

 

import re

 

reference_id = input('Enter your Reference ID: ')

    

regex = r'\d'

 

digit_validation = len(re.findall(regex, reference_id))

 

if re.match(r'[A-Za-z0-9@#!$%&®*]',reference_id) and digit_validation == 12 :

    print('Valid Reference ID, Thanks!')

    encrypted_ref_id = reference_id.encode('utf-8',errors='strict')

    print('Encrypted Reference ID for your reference is: ', encrypted_ref_id)

    response_to_decrypt = input('Do you want to decrypt your entry(Enter Yes or No): ')

    if (response_to_decrypt.lower() == 'yes' or response_to_decrypt.lower()=='y'):

        print('Your decrypted ID is ',encrypted_ref_id.decode())

    else:

        print('Thanks for your confirmation')

else:

    print('Not a Valid Reference ID!!')
